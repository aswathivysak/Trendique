
<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">

<style>
  .form-section {
    background: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
  }
  .preview-container {
    margin-top: 10px;
    display: none;
  }
  .image-preview {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border: 1px solid #ddd;
    border-radius: 8px;
  }
  .color-dots {
    display: flex;
    gap: 10px;
    margin-top: 10px;
  }
  .color-dot {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    border: 2px solid #ddd;
    cursor: pointer;
  }
</style>

<div class="container mt-5">
  <h3 class="mb-4">Add New Product</h3>
  <form id="productForm" class="row g-4 form-section" enctype="multipart/form-data">

    <div class="col-md-6">
      <!-- Text Inputs -->
      <label class="form-label">Product Name</label>
      <input type="text" class="form-control" name="name" required>

      <label class="form-label mt-3">Description</label>
      <textarea class="form-control" name="description" rows="4" required></textarea>

      <label class="form-label mt-3">Category</label>
      <select class="form-select" name="category" required>
        <option value="" disabled selected>Select Category</option>
        <% for (let i = 0; i < cat.length; i++) { %>
          <option value="<%= cat[i]._id %>"><%= cat[i].name %></option>
        <% } %>
      </select>

      <label class="form-label mt-3">Brand</label>
      <input type="text" class="form-control" name="brand" required>

      <div class="row mt-3">
        <div class="col">
          <label class="form-label">Price</label>
          <input type="number" class="form-control" name="regularPrice" required>
        </div>
        <div class="col">
          <label class="form-label">Discount (%)</label>
          <input type="number" class="form-control" name="salePrice">
        </div>
      </div>

      <label class="form-label mt-3">Final Price</label>
      <input type="number" class="form-control" name="finalPrice" required>

      <label class="form-label mt-3">Stock Quantity</label>
      <input type="number" class="form-control" name="quantity" required>

      <label class="form-label mt-3">Color (comma separated)</label>
      <input type="text" class="form-control" name="color" id="colorInput">
      <div class="color-dots" id="colorDots"></div>

      <label class="form-label mt-3">Size (comma separated)</label>
      <input type="text" class="form-control" name="size">

      <div class="row mt-3">
        <div class="col">
          <label class="form-label">Fit</label>
          <select class="form-select" name="fit">
            <option value="Regular">Regular</option>
            <option value="Slim">Slim</option>
            <option value="Loose">Loose</option>
          </select>
        </div>
        <div class="col">
          <label class="form-label">Material</label>
          <input type="text" class="form-control" name="material">
        </div>
      </div>

      <label class="form-label mt-3">Offer Description</label>
      <input type="text" class="form-control" name="offer">

      <label class="form-label mt-3">Offer Valid Until</label>
      <input type="date" class="form-control" name="offerValidUntil">

      <label class="form-label mt-3">Status</label>
      <select class="form-select" name="status">
        <option value="available">Available</option>
        <option value="out of stock">Out of Stock</option>
        <option value="Discontinued">Discontinued</option>
      </select>
    </div>

    <!-- Image Upload Section -->
    <div class="col-md-6">
      <h4>Product Images</h4>
      <% for (let i = 1; i <= 4; i++) { %>
        <div class="form-group mb-3">
          <label for="image<%= i %>">Image <%= i %></label>
          <% const index = i; %>
          <input type="file" class="form-control" id="image<%= i %>" accept="image/*" required  onchange="previewImage(event, <%= index %>)">
          <div class="preview-container">
            <img id="preview<%= i %>" class="image-preview" src="#" alt="Preview">
          </div>
        </div>
      <% } %>
    </div>

    <div class="col-12 d-flex justify-content-end">
      <button type="reset" class="btn btn-outline-secondary me-2" id="resetBtn">Cancel</button>
      <button type="submit" class="btn btn-dark">Save</button>
    </div>
  </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
  let croppers = {};

  function previewImage(event, index) {
    const input = event.target;
    const preview = document.getElementById(`preview${index}`);
    const previewContainer = preview.parentElement;

    if (croppers[index]) {
      croppers[index].destroy();
    }

    if (input.files && input.files[0]) {
      const reader = new FileReader();
      reader.onload = function (e) {
        preview.src = e.target.result;
        preview.onload = function () {
          previewContainer.style.display = 'block';
          croppers[index] = new Cropper(preview, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1
          });
        };
      };
      reader.readAsDataURL(input.files[0]);
    }
  }

  document.getElementById('productForm').addEventListener('submit', async function (e) {
    e.preventDefault();
    const formData = new FormData(this);
    let isValid = true;

    const stock = parseInt(formData.get('quantity'));
    const price = parseFloat(formData.get('price'));
    const finalPrice = parseFloat(formData.get('finalPrice'));

    if (stock < 0 || price <= 0 || finalPrice <= 0 || finalPrice > price) {
      isValid = false;
      Swal.fire('Invalid Input', 'Please check price or stock values.', 'error');
      return;
    }

    for (let i = 1; i <= 4; i++) {
      const fileInput = document.getElementById(`image${i}`);
      if (fileInput.files.length > 0) {
        await new Promise(resolve => {
          croppers[i].getCroppedCanvas().toBlob(blob => {
            formData.set(`image${i}`, blob, `image${i}.jpg`);
            resolve();
          }, 'image/jpeg');
        });
      } else {
        isValid = false;
        Swal.fire('Missing Image', `Image ${i} is required`, 'error');
        return;
      }
    }

    if (isValid) {
      fetch('/admin/addProducts', {
        method: 'POST',
        body: formData
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Success!', 'Product added successfully!', 'success').then(() => {
            window.location.href = '/admin/addProducts';
          });
        } else {
          Swal.fire('Error!', data.message || 'An error occurred', 'error');
        }
      })
      .catch(err => {
        console.error(err);
        Swal.fire('Error!', 'Something went wrong', 'error');
      });
    }
  });

  // Reset button logic
  document.getElementById('resetBtn').addEventListener('click', () => {
    for (let i = 1; i <= 4; i++) {
      const preview = document.getElementById(`preview${i}`);
      preview.src = '#';
      preview.parentElement.style.display = 'none';
      document.getElementById(`image${i}`).value = '';
      if (croppers[i]) {
        croppers[i].destroy();
        delete croppers[i];
      }
    }
  });
</script>
<%- include("../../views/partials/admin/footer") %>