<%- include("../../views/partials/admin/header") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">

<style>
  .form-section {
    background: #ffffff;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
  }
  .preview-container {
    margin-top: 10px;
    display: none;
  }
  .image-preview {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border: 1px solid #ddd;
    border-radius: 8px;
  }
  .color-dots {
    display: flex;
    gap: 10px;
    margin-top: 10px;
  }
  .color-dot {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    border: 2px solid #ddd;
    cursor: pointer;
  }
  .text-danger {
    color: red;
    font-size: 0.9em;
    margin-top: 2px;
  }
/*image */
.image-upload-container {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.image-upload-item {
  flex: 1 1 calc(50% - 15px); /* two items per row with gap */
  max-width: calc(50% - 15px);
  box-sizing: border-box;
}

@media (max-width: 576px) {
  .image-upload-item {
    flex: 1 1 100%; /* stack on small screens */
    max-width: 100%;
  }
}

.image-preview {
  width: 100%;
  max-width: 150px;
  height: auto;
  border-radius: 8px;
  border: 1px solid #ddd;
  margin-top: 8px;
}

.preview-container {
  margin-top: 10px;
  display: none; /* show when image is selected */
}
input.is-invalid, select.is-invalid, textarea.is-invalid {
  border-color: red !important;
}

</style>

<div class="container mt-5">
  <h3 class="mb-4">Add New Product</h3>
  <form id="productForm" class="row g-4 form-section" enctype="multipart/form-data" novalidate>

    <div class="col-md-6">
      <label class="form-label">Product Name</label>
      <input type="text" id="name" name="name" class="form-control" required>
      <div id="name-error" class="text-danger"></div>

      <label class="form-label mt-3">Description</label>
      <textarea id="description" name="description" class="form-control" rows="4" required></textarea>
      <div id="description-error" class="text-danger"></div>

      <div class="row mt-3">
        <div class="col-md-6">
          <label class="form-label">Category</label>
          <select id="category" name="category" class="form-select" required>
            <option value="" disabled selected>Select Category</option>
            <% for (let i = 0; i < cat.length; i++) { %>
              <option value="<%= cat[i]._id %>"><%= cat[i].name %></option>
            <% } %>
          </select>
          <div id="category-error" class="text-danger"></div>
        </div>
        <div class="col-md-6">
          <label class="form-label">Subcategory</label>
          <select id="subcategory" name="subcategory" class="form-select" required>
            <option value="" disabled selected>Select Subcategory</option>
             <!-- options will be added dynamically -->
           
          </select>
          <div id="subcategory-error" class="text-danger"></div>
        </div>
      </div>

      <label class="form-label mt-3">Brand</label>
      <select id="brand" name="brand" class="form-select" required>
        <option value="" disabled selected>Select Brand</option>
        <% for (let i = 0; i < brands.length; i++) { %>
          <option value="<%= brands[i]._id %>"><%= brands[i].brandName %></option>
        <% } %>
      </select>
      <div id="brand-error" class="text-danger"></div>

      <div class="row mt-3">
        <div class="col">
          <label class="form-label">Regular Price</label>
          <input type="number" id="regularPrice" name="regularPrice" class="form-control" required>
          <div id="regularPrice-error" class="text-danger"></div>
        </div>
      </div>

      <label class="form-label mt-3">Final Price</label>
      <input type="number" id="finalPrice" name="finalPrice" class="form-control" required>
      <div id="finalPrice-error" class="text-danger"></div>

     

      <label class="form-label mt-3">Material</label>
      <input type="text" id="material" name="material" class="form-control" >
      <div id="material-error" class="text-danger"></div>

      <label class="form-label mt-3">Status</label>
      <input type="text" id="status" name="status" class="form-control" >
      <div id="status-error" class="text-danger"></div>
    </div>
    <div class="col-md-6">
      <h4>Product Images</h4>
    
      <div class="image-upload-container">
        <% for (let i = 1; i <= 4; i++) { %>
          <div class="image-upload-item">
            <label for="image<%= i %>">Image <%= i %></label>
            <input
              type="file"
              id="image<%= i %>"
              name="image<%= i %>"
              class="form-control"
              accept="image/*"
              required
              onchange="previewImage(event, <%= i %>)"
            >
            <div class="preview-container">
              <img
                id="preview<%= i %>"
                class="image-preview"
                src="#"
                alt="Preview"
              >
            </div>
            <input
              type="hidden"
              id="croppedImage<%= i %>"
              name="croppedImage<%= i %>"
            >
            <div id="image<%= i %>-error" class="text-danger"></div>
          </div>
        <% } %>
      </div>
    </div>
    

    <!-- <div class="col-md-6">
      <h4>Product Images</h4>

      <% for (let i = 1; i <= 4; i++) { %>
        <div class="form-group mb-3">
          <label for="image<%= i %>">Image <%= i %></label>
          <% const index = i %>
          <input type="file" id="image<%= i %>" name="image<%= i %>" class="form-control" accept="image/*" required onchange="previewImage(event, <%= index %>)">
          <div class="preview-container">
            <img id="preview<%= i %>" class="image-preview" src="#" alt="Preview">
          </div>
          <div id="image<%= i %>-error" class="text-danger"></div>
         
          <input type="hidden" id="croppedImage<%= i %>" name="croppedImage<%= i %>">
        </div>
      <% } %>

    </div> -->

    <div class="col-12 d-flex justify-content-end">
      <button type="reset" class="btn btn-outline-secondary me-2" id="resetBtn">Cancel</button>
      <button type="submit" class="btn btn-dark">Save</button>
    </div>

  </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
  // Categories data from server passed as JSON
  const categories = <%- JSON.stringify(cat) %>;

  const categorySelect = document.getElementById('category');
  const subcategorySelect = document.getElementById('subcategory');

  categorySelect.addEventListener('change', function() {
    const selectedCatId = this.value;

    // Clear previous subcategory options
    subcategorySelect.innerHTML = '<option value="" disabled selected>Select Subcategory</option>';

    if (!selectedCatId) return;

    // Find the selected category object
    const selectedCategory = categories.find(cat => cat._id === selectedCatId);

    if (selectedCategory && selectedCategory.subcategories) {
      selectedCategory.subcategories.forEach(subcat => {
        const option = document.createElement('option');
        option.value = subcat._id;  // or subcat.name if you store subcategory as string
        option.textContent = subcat.name;
        subcategorySelect.appendChild(option);
      });
    }
  });
</script>

<script>
  let croppers = {};

  function previewImage(event, index) {
    const input = event.target;
    const previewContainer = input.parentElement.querySelector('.preview-container');
    const preview = document.getElementById(`preview${index}`);
    const errorDiv = document.getElementById(`image${index}-error`);

    // Reset previous preview and errors
    previewContainer.style.display = 'none';
    if (errorDiv) errorDiv.textContent = '';
    if (croppers[index]) {
      croppers[index].destroy();
      delete croppers[index];
    }

    if (input.files && input.files[0]) {
      const file = input.files[0];

      // Validate file type and size
      const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];
      const maxSize = 5 * 1024 * 1024; // 5MB

      if (!validImageTypes.includes(file.type)) {
        if (errorDiv) errorDiv.textContent = 'Please select a valid image file (JPEG, PNG, GIF, BMP, or WebP)';
        input.value = '';
        return;
      }

      if (file.size > maxSize) {
        if (errorDiv) errorDiv.textContent = 'Image file size must be less than 5MB';
        input.value = '';
        return;
      }

      // Load image and initialize cropper
      const reader = new FileReader();
      reader.onload = function(e) {
        preview.src = e.target.result;
        previewContainer.style.display = 'block';
        croppers[index] = new Cropper(preview, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 1,
          ready: function() {
            this.cropper.crop();
          }
        });
      };
      reader.readAsDataURL(file);
    }
  }

  document.getElementById('productForm').addEventListener('submit', function(e) {
    e.preventDefault();

    let isValid = true;
    const requiredFields = ['name', 'description', 'brand', 'regularPrice', 'finalPrice','material', 'status', 'category', 'subcategory'];

    requiredFields.forEach(field => {
      const input = document.getElementById(field);
      const errorElem = document.getElementById(`${field}-error`);
      
      // Reset styles
      if (input) input.classList.remove('is-invalid');
      if (errorElem) errorElem.textContent = '';
    
      if (!input || !input.value.trim()) {
        isValid = false;
        if (errorElem) errorElem.textContent = 'This field is required.';
        if (input) input.classList.add('is-invalid');
      }
    });
    

    // Clear previous error messages
    /*requiredFields.forEach(field => {
      const errorElem = document.getElementById(`${field}-error`);
      if (errorElem) errorElem.textContent = '';
    });*/

    // Validate required fields
    /*requiredFields.forEach(field => {
      const input = document.getElementById(field);
      if (!input || !input.value.trim()) {
        isValid = false;
        const errorElem = document.getElementById(`${field}-error`);
        if (errorElem) errorElem.textContent = 'This field is required.';
      }
    });*/

    // Get numeric values
    /*const quantity = parseInt(document.getElementById('quantity').value);*/
    const regularPrice = parseFloat(document.getElementById('regularPrice').value);
    const finalPrice = parseFloat(document.getElementById('finalPrice').value);

    // Validate quantity
   /* if (quantity < 0) {
      isValid = false;
      Swal.fire({
        title: 'Invalid Quantity!',
        text: 'Quantity cannot be less than zero',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      const errorElem = document.getElementById('quantity-error');
      if (errorElem) errorElem.textContent = 'Quantity cannot be less than zero';
      return;
    }*/

    // Validate regular price
    if (regularPrice <= 0) {
      isValid = false;
      Swal.fire({
        title: 'Invalid Regular Price!',
        text: 'Regular price must be greater than zero',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      const errorElem = document.getElementById('regularPrice-error');
      if (errorElem) errorElem.textContent = 'Regular price must be greater than zero';
      return;
    }

    // Validate final price
    if (finalPrice <= 0) {
      isValid = false;
      Swal.fire({
        title: 'Invalid Final Price!',
        text: 'Final price must be greater than zero',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      const errorElem = document.getElementById('finalPrice-error');
      if (errorElem) errorElem.textContent = 'Final price must be greater than zero';
      return;
    }

    // Final price cannot be higher than regular price
    if (finalPrice > regularPrice) {
      isValid = false;
      Swal.fire({
        title: 'Invalid Price!',
        text: 'Final price cannot be higher than regular price',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      const errorElem = document.getElementById('finalPrice-error');
      if (errorElem) errorElem.textContent = 'Final price cannot be higher than regular price';
      return;
    }

    // Check if all 4 images are uploaded
    let imageCount = 0;
    for (let i = 1; i <= 4; i++) {
      if (document.getElementById(`image${i}`).files.length > 0) {
        imageCount++;

        if (croppers[i]) {
          const croppedDataUrl = croppers[i].getCroppedCanvas().toDataURL('image/jpeg');
          document.getElementById(`croppedImage${i}`).value = croppedDataUrl;
        }
      }
    }
    if (imageCount < 4) {
      isValid = false;
      Swal.fire({
        title: 'Images Required!',
        text: 'Please upload all 4 product images',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      return;
    }

    if (isValid) {
      const formData = new FormData(this);
      fetch('/admin/addProducts', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Product added successfully',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(result => {
            if (result.isConfirmed) {
              window.location.href = '/admin/products';
            }
          });
        } else {
          Swal.fire({
            title: 'Error!',
            text: data.message || 'An error occurred while adding the product',
            icon: 'error',
            confirmButtonText: 'OK'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error!',
          text: 'An unexpected error occurred',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      });
    }
  });

  // Real-time validation listeners
  [ 'regularPrice', 'finalPrice'].forEach(id => {
    document.getElementById(id).addEventListener('input', function () {
      const val = this.value.trim();
      const num = parseFloat(val);
      const errorElem = document.getElementById(`${id}-error`);
      if (!val || isNaN(num) || num <= 0) {
        if (errorElem) errorElem.textContent = `${this.name || id} must be greater than zero`;
      } else {
        if (errorElem) errorElem.textContent = '';
      }

      if (id === 'finalPrice') {
        // Check if finalPrice > regularPrice
        const regularPriceVal = parseFloat(document.getElementById('regularPrice').value);
        if (!isNaN(regularPriceVal) && num > regularPriceVal) {
          if (errorElem) errorElem.textContent = 'Final price cannot be higher than regular price';
        }
      }
    });
  });

  // Reset button logic
  document.getElementById('resetBtn').addEventListener('click', () => {
    for (let i = 1; i <= 4; i++) {
      const preview = document.getElementById(`preview${i}`);
      preview.src = '#';
      preview.parentElement.style.display = 'none';
      document.getElementById(`image${i}`).value = '';
      if (croppers[i]) {
        croppers[i].destroy();
        delete croppers[i];
      }
      // Clear hidden cropped images
      const hiddenInput = document.getElementById(`croppedImage${i}`);
      if (hiddenInput) hiddenInput.value = '';
    }
  });
</script>

<%- include("../../views/partials/admin/footer") %>
