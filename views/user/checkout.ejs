<!-- <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Checkout with Bootstrap</title> -->
     <!-- Bootstrap CSS CDN -->


     <%- include('../partials/user/header') %>
     <div class="pt-5 mt-4">


   <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" /> -->
  <style>
    .address-card {
      cursor: pointer;
      border: 2px solid #ddd;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      transition: border-color 0.3s ease, background-color 0.3s ease;
      display: flex;
      align-items: center;
      gap: 20px;
      position: relative;
    }
    .address-card:hover {
      border-color: #0d6efd;
      background-color: #e7f1ff;
    }
    .address-data{
      margin-left: 40px;
    }
    .address-card.selected {
      border-color: #0d6efd;
      background-color: #d0e2ff;
    }
    .address-type {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 9999px;
      font-weight: 700;
      font-size: 0.85rem;
      color: white;
      background-color: #0d6efd;
      margin-right: 15px;
      white-space: nowrap;
    }
    .address-type.office {
      background-color: #fd7e14;
    }
    .address-name {
      font-weight: 700;
      font-size: 1.15rem;
    }
    .address-text {
      margin-top: 6px;
      font-size: 1rem;
      color: #444;
      line-height: 1.5;
    }
    .address-actions {
      position: absolute;
      top: 15px;
      right: 15px;
      display: flex;
      gap: 10px;
    }
    .address-actions button {
      border: none;
      background: transparent;
      color: #0d6efd;
      font-weight: 600;
      cursor: pointer;
      padding: 0;
    }
    .address-actions button:hover {
      text-decoration: underline;
    }
    /* For the radio */
    .form-check-input {
      cursor: pointer;
      width: 22px;
      height: 22px;
      flex-shrink: 0;
      margin: 0;
    }
    /* Order summary styling */
    .order-item {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 18px;
    }
    .order-item-icon {
      background: #e0e7ff;
      color: #4338ca;
      border-radius: 10px;
      width: 42px;
      height: 42px;
      display: grid;
      place-items: center;
      font-size: 22px;
    }
    .order-item-name {
      font-weight: 600;
      font-size: 1rem;
    }
    .order-item-qty {
      font-size: 0.85rem;
      color: #666;
    }
    .order-item-price {
      font-weight: 700;
      font-size: 1rem;
      margin-left: auto;
    }
    .order-summary-line {
      display: flex;
      justify-content: space-between;
      font-weight: 600;
      margin: 8px 0;
      font-size: 1rem;
    }
    .order-summary-line.total {
      font-size: 1.25rem;
      border-top: 1px solid #ddd;
      padding-top: 10px;
      margin-top: 16px;
    }
    .coupon-section input {
      flex-grow: 1;
      border-radius: 0.375rem;
      border: 1.5px solid #ced4da;
      padding: 0.5rem 0.75rem;
      font-size: 1rem;
    }
    .coupon{
      max-width: 100%;
    }
    .coupon-section button {
      border-radius: 0.375rem;
      background: #0d6efd;
      border: none;
      color: white;
      font-weight: 700;
      padding: 0.5rem 1.5rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .coupon-section button:hover {
      background: #0b5ed7;
    }
    .payment-method label {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
      cursor: pointer;
    }
    .btn-place-order {
      background: #0d6efd;
      color: white;
      border: none;
      padding: 15px;
      font-size: 1.15rem;
      font-weight: 700;
      border-radius: 8px;
      cursor: pointer;
      width: 100%;
      margin-top: 25px;
      transition: background-color 0.3s ease;
    }
    .btn-place-order:hover {
      background: #0b5ed7;
    }

    /* Coupon */
    .coupon-card {
      border: 2px solid #eaeaea;
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
  }

  .coupon-name {
      font-size: 12px;
      font-weight: bold;
  }

  .use-button {
      background-color: #4caf50;
      color: #fff;
      border: none;
      padding: 8px 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
  }
   .couponModal{
    z-index: 4000;
   }
  .use-button:hover {
      background-color: #45a049;
  }
  </style>
<!-- </head>
<body> -->

<div class="container my-5">
  <!-- Breadcrumb -->
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
      <li class="breadcrumb-item active" aria-current="page">Checkout</li>
    </ol>
  </nav>

  <div class="row g-4">
    <!-- Left: Shipping Addresses -->
    <div class="col-lg-7">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Shipping Address</h2>
        <a href="/addAddress" class="text-primary fw-semibold text-decoration-none">Add New Address</a>
      </div>

      <!-- <form id="checkoutForm"> -->
        <div role="list" aria-label="Shipping addresses">
          <% if(userAddress && userAddress.address && userAddress.address.length > 0) { %>
            <% userAddress.address.forEach((addr, idx) => { %>
              <div
                class="address-card <%= idx === 0 ? 'selected' : '' %>"
                role="listitem"
                aria-checked="<%= idx === 0 ? 'true' : 'false' %>"
                tabindex="0"
                onclick="selectAddress(this)"
              >
                <input 
                  class="form-check-input" 
                  type="radio" 
                  id="addr<%= idx %>" 
                  name="shippingAddress" 
                  value="<%= addr._id %>" 
                  <%= idx === 0 ? 'checked' : '' %>
                />
                <div class="address-data">
                  <span class="address-type <%= addr.addressType.toLowerCase() === 'office' ? 'office' : '' %>"><%= addr.addressType %></span>
                  <span class="address-name"><%= addr.name %></span>
                  <p class="address-text mb-0">
                    <%= addr.houseNo %><br />
                    <%= addr.city %>, <%= addr.state %><br />
                    Pincode: <%= addr.pincode %><br />
                    Phone: <%= addr.phone %><br />
                    <% if(addr.altPhone) { %>Alternate Phone: <%= addr.altPhone %><br /><% } %>
                  </p>
                </div>
                <div class="address-actions">
                  <a href="/editAddress?id=<%= addr._id %>" class="btn btn-sm btn-link p-0 me-2" aria-label="Edit address">Edit</a>
                  <a href="/deleteAddress?id=<%= addr._id %>" class="btn btn-sm btn-link p-0 text-danger" aria-label="Delete address" onclick="return confirm('Are you sure you want to delete this address?')">Delete</a>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <p>No addresses found. <a href="/addAddress">Add one now.</a></p>
          <% } %>
        </div>

        <!-- Payment method -->
        <!-- <div class="payment-method mt-4">
          <h3 class="fw-semibold mb-3">Payment Method</h3>
          <label class="d-flex align-items-center gap-2 mb-3" for="online">
            <input type="radio" id="online" name="paymentMethod" value="wallet" />
            <span>Wallet </span>
          </label>
          <label class="d-flex align-items-center gap-2 mb-3" for="razorpay">
            <input type="radio" id="razorpay" name="paymentMethod" value="razorpay" />
            <span> Razorpay</span>
          </label>
          <label class="d-flex align-items-center gap-2" for="cod">
            <input type="radio" id="cod" name="paymentMethod" value="cod" checked />
            <span>Cash on Delivery</span>
          </label>
        </div>

        <button type="button" id="placeOrderBtn" class="btn-place-order">Place Order</button> -->
      <!-- </form> -->
    </div>

    <!-- Right: Order Summary -->
    <div class="col-lg-5 bg-white p-4 rounded shadow-sm">
      <h2>Your Order</h2>

      <% if(cartItems && cartItems.length > 0) { %>
        <% cartItems.forEach(item => { %>
          <div class="order-item" role="listitem">
            <div class="order-item-icon" aria-hidden="true">
              <img src="/<%= item.productId.images[0] %>" alt="<%= item.productId.name%>" style="width:32px; height:32px; border-radius:4px;">
            </div>
            <div>
              <div class="order-item-name"><%= item.productId.name.split('|')[0].trim() %></div>
              <div class="order-item-qty">x <%= item.quantity %></div>
              <div class="order-item-size-color small text-muted">Size: <%= item.size %>, Color: <%= item.color %></div>
            </div>
            <!-- <div><button type="button" onclick="removeItem('<%= item._id %>')" class="btn btn-sm btn-outline-danger">Delete</button></div> -->
            <div class="order-item-price">₹ <%= (item.productId.finalPrice * item.quantity).toFixed(2) %></div>
          </div>
        <% }); %>
      <% } else { %>
        <p>Your cart is empty.</p>
      <% } %>

      <div class="order-summary-line d-flex justify-content-between fw-semibold mt-3">
        <span>Subtotal</span>
        <span>₹ <%= grandTotal %></span>
      </div>
      <!-- You can add discount or coupon here if needed -->
      <div class="order-summary-line d-flex justify-content-between mt-2">
        <span>Shipping</span>
        <span id="shippingCharge"><%= shippingCharge %></span>
      </div>
            <!-- Discount line placeholder (hidden initially) -->
      <div class="order-summary-line d-flex justify-content-between mt-2 text-success" id="discountLine" style="display:none;">
        <span >Discount</span>
        <span id="discountAmount">- ₹<%= appliedCoupon ? appliedCoupon.discount : 0 %></span>
      </div>
      <div class="order-summary-line total d-flex justify-content-between fw-bold mt-2 border-top pt-2">
        <span>Total</span>
        <span id="totalAmount">₹ <%= parseFloat(totalPayable).toFixed(2) %></span>
      </div>
      <input type="hidden" name="finalAmount" id="totalPayable" value="<%= totalPayable %>">
      <input type="hidden" id="originalGrandTotal" value="<%= grandTotal %>">
      <input type="hidden" id="originalShippingCharge" value="<%= shippingCharge %>">

      
      <!-- Coupon -->
      
      <div class="col-md-5 mt-5 coupon" >
        <div class="card shadow-sm p-4 mb-4">
          <h5 class="mb-3">Apply Coupon</h5>
          <div class="input-group">
            <input 
              type="text" 
              id="couponCode" 
              class="form-control" 
              placeholder="Enter coupon code"
              <%= appliedCoupon ? 'value="'+ appliedCoupon.code +'" disabled' : '' %>
            >
            <button 
              type="button" 
              class="btn btn-success" 
              id="applyBtn" 
              onclick="toggleCoupon()"
            >
              <%= appliedCoupon ? 'Remove Coupon' : 'Apply' %>
            </button>
          </div>
          <small id="couponMessage" class="mt-2 d-block">
            <% if(appliedCoupon){ %> Coupon "<%= appliedCoupon.code %>" applied! <% } %>
          </small>
          <button type="button" class="btn  btn-info mb-3 mt-3" id="showCouponsBtn">
            Available Coupons
          </button>
        </div>
      
       
      </div>
      
      
      
      <!-- <div class="available-coupons mt-4">
        <h5 class="mb-3">Available Coupons</h5>
        <div class="row">
          <div class="col-md-6 mb-3">
            <div class="card shadow-sm border-0 h-100">
              <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="card-title mb-1">
                    <span class="badge bg-success me-2">COUPON_NAME</span>
                    <span class="badge bg-warning text-dark">Gifted</span>
                  </h6>
                  <p class="card-text mb-0 small text-muted">
                    Save ₹OFFER_PRICE on min order of ₹MINIMUM_PRICE
                  </p>
                  <p class="card-text mb-0 small text-muted">
                    Valid till: EXPIRY_DATE
                  </p>
                </div>
                <button class="btn btn-outline-primary btn-sm copy-btn" data-coupon="COUPON_NAME">
                  Copy
                </button>
              </div>
            </div>
          </div>
          
        </div>
      </div> -->
      


    <!-- place order -->
    <div><br></div>
    <div class="payment-method mt-4">
      <h3 class="fw-semibold mb-3">Payment Method</h3>
      <label class="d-flex align-items-center gap-2 mb-3" for="online">
        <input type="radio" id="online" name="paymentMethod" value="wallet" />
        <span>Wallet </span>
      </label>
      <label class="d-flex align-items-center gap-2 mb-3" for="razorpay">
        <input type="radio" id="razorpay" name="paymentMethod" value="razorpay" />
        <span> Razorpay</span>
      </label>
      <label class="d-flex align-items-center gap-2" for="cod">
        <input type="radio" id="cod" name="paymentMethod" value="cod" checked />
        <span>Cash on Delivery</span>
      </label>
    </div>
    
    <button type="button" id="placeOrderBtn" class="btn-place-order">Place Order</button>
  
    </div>
     <!-- Coupons Modal -->
<div class="modal couponModal fade" id="couponsModal" tabindex="-1" aria-labelledby="couponsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="couponsModalLabel">Available Coupons</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="couponsModalBody">
        <!-- Coupons will be loaded here dynamically -->
        <p>Loading coupons...</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>


  </div>
</div>

<script>
  function selectAddress(card) {
    document.querySelectorAll('.address-card').forEach(c => {
      c.classList.remove('selected');
      c.setAttribute('aria-checked', 'false');
      c.querySelector('input[type="radio"]').checked = false;
    });
    card.classList.add('selected');
    card.setAttribute('aria-checked', 'true');
    card.querySelector('input[type="radio"]').checked = true;
  }
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  async function removeItem(itemId){
   const confirmuser = confirm('Are you sure want to remove this item from the cart?')
   if(!confirmuser){
       return
   }

   try {
       const response = await fetch(`/removeItem/${itemId}`, {
           method: 'DELETE',
       })

       const result = await response.json()
       if(response.ok && result.success){
           Swal.fire({
               icon: 'success',
               title: 'Item removed',
               text:'Item is removed from the cart',
               timer: 1200,
               showConfirmButton: false
           })
           .then(()=>{
               location.reload()
           })
       }else{
           Swal.fire({
               icon: 'warning',
               title: 'Oops!',
               text: result.message || 'Something went wrong',
               timer: 1200,
               showConfirmButton: false
           })
       }
   } catch (error) {
       console.error('Error while removing item ', error)
       Swal.fire({
           icon: 'error',
           title: 'Error',
           text: error.message || 'Internal server error'
       })
   }
 }
</script>
<script>
 
 
 //place order
 /* document.getElementById('placeOrderBtn').addEventListener('click', function (e) {
    e.preventDefault();
  
    let address = document.querySelector('input[name="shippingAddress"]:checked')?.value;
    let payment = document.querySelector('input[name="paymentMethod"]:checked')?.value;
    const discountText = document.getElementById('discountAmount').textContent;
    let discount = parseFloat(discountText.replace(/[^\d.]/g, '')) || 0;
  
    const totalText = document.querySelector('#totalAmount')?.textContent || '<%= parseFloat(totalPayable).toFixed(2) %>';
    const numericValue = parseFloat(totalText.replace(/[^\d.]/g, ''));
  
    if (!payment) {
      Swal.fire({ title: 'NO PAYMENT FOUND!', text: 'Please select your payment method.', icon: 'error', timer: 3000 });
      return;
    }
  
    if (!address) {
      Swal.fire({ title: 'NO ADDRESS FOUND!', text: 'Please select a shipping address.', icon: 'error', timer: 3000 });
      return;
    }
  
    if (payment === "cod" && numericValue > 10000) {
      Swal.fire({ title: 'COD Not Allowed!', text: 'Orders above ₹10000 are not allowed for COD.', icon: 'error', timer: 3000 });
      return;
    }
  
    $.ajax({
      url: '/placeOrder',
      method: 'POST',
      contentType: "application/json",
      data: JSON.stringify({
        totalPrice: numericValue,
        addressId: address,
        payment: payment,
        discount:discount
      }),
      success: function (response) {
        let orderId = response.order?._id;
  
        if (response.method === "cod") {
          Swal.fire({
            title: "Order success",
            text: "Order placed successfully",
            icon: "success",
            showCancelButton: true,
            confirmButtonText: "View orders",
            cancelButtonText: "Continue shopping",
            reverseButtons: true
          }).then(function (result) {
            if (result.value) {
              window.location.href = `/viewOrderDetails/${orderId}`
             /* location.href = `/order-success/${orderId}`;*/
          /*  } else if (result.dismiss === "cancel") {
              location.href = '/';
            }
          });
  
        } else if (response.method === "wallet") {
          if (response.payment === true) {
            Swal.fire({
              title: "Order success",
              text: "Order placed successfully",
              icon: "success",
              showCancelButton: true,
              confirmButtonText: "View orders",
              cancelButtonText: "Continue shopping",
              reverseButtons: true
            }).then(function (result) {
              if (result.value) {
                window.location.href = `/viewOrderDetails/${orderId}`
              } else if (result.dismiss === "cancel") {
                location.href = '/';
              }
            });
          } else {
            Swal.fire({
              title: "Order failed",
              text: "Wallet amount is not enough",
              icon: "error",
              showConfirmButton: true,
            }).then(function (result) {
              if (result.value) {
                location.href = '/checkout';
              }
            });
          }
  
        } else if (response.method === "razorpay") {
          let orderAmount = Math.round(numericValue * 100);
          var options = {
            "key": "rzp_test_ClMWweWS70Dbkd",
            "amount": orderAmount,
            "currency": "INR",
            "name": "TrendiQue",
            "description": "Test Transaction",
            "order_id": response.razorPayOrder.id,
            "handler": function (status) {
              verifyPayment(response.razorPayOrder, status, orderId);
            },
            "prefill": {
              "name": "Customer Name",
              "email": "customer@example.com",
              "contact": "9961618585"
            },
            "theme": {
              "color": "#3399cc"
            }
          };
          var rzp1 = new Razorpay(options);
          rzp1.on('payment.failed', function (response) {
            verifyPayment({
              id: response.error.metadata.order_id,
              receipt: `order_receipt_${orderId}`
            }, response.error, orderId);
          });
          rzp1.open();
  
        } else {
          Swal.fire({
            title: 'Error Occurred',
            text: "Can't process order, error occurred",
            icon: 'error',
            timer: 5000
          });
        }
      }
    });
  });
  function verifyPayment(order, payment, orderId) {
    $.ajax({
      url: '/verifyPayment',
      method: 'POST',
      data: {
        order,
        payment
      },
      success: function(response) {
        if (response.status) {
          Swal.fire({
            title: "Order success",
            text: "Order placed successfully",
            icon: "success",
            showCancelButton: true,
            confirmButtonText: "View orders",
            cancelButtonText: "Continue shopping",
            reverseButtons: true
          }).then(function(result) {
            if (result.isConfirmed) {
              window.location.href = `/viewOrderDetails/${orderId}`
            } else {
              location.href = '/';
            }
          });
        } else {
          Swal.fire({
            title: "Payment Failed",
            text: "Transaction failed. Please try again.Go to order detail page",
            icon: "error",
            confirmButtonText: "Retry"
          });
        }
      }
    });
  }*/
  


  // place order 2
  
  function checkStockAvailability() {
    return fetch('/check-stock')
      .then(response => response.json())
      .then(data => {
        if (!data.success) throw new Error(data.message);
        return data;
      });
  }
  
    
    document.getElementById('placeOrderBtn').addEventListener('click', async function (e) {
      e.preventDefault();
    
      try {
        const address = document.querySelector('input[name="shippingAddress"]:checked')?.value;
        const payment = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        const discountText = document.getElementById('discountAmount').textContent;
        const discount = parseFloat(discountText.replace(/[^\d.]/g, '')) || 0;
    
        const totalText = document.querySelector('#totalAmount')?.textContent || '<%= parseFloat(totalPayable).toFixed(2) %>';
        const numericValue = parseFloat(totalText.replace(/[^\d.]/g, ''));
    
        if (!payment) return Swal.fire('NO PAYMENT FOUND!', 'Please select your payment method.', 'error');
        if (!address) return Swal.fire('NO ADDRESS FOUND!', 'Please select a shipping address.', 'error');
        if (payment === "cod" && numericValue > 10000)
          return Swal.fire('COD Not Allowed!', 'Orders above ₹10000 are not allowed for COD.', 'error');
              
              const stockResponse = await checkStockAvailability();
          const stockStatus = stockResponse.items || [];
          const hasBlocked = stockResponse.hasBlocked;

          // If cart is empty (after filtering out blocked/out-of-stock)
          if (stockStatus.length === 0 && hasBlocked) {
            await Swal.fire('Cart Invalid', 'All items in your cart are blocked or unavailable.', 'warning');
            return window.location.href = '/cart';
          }

          //  If any product is blocked (admin-blocked or deleted)
          const blockedItem = stockStatus.find(i => i.isBlocked);
          if (blockedItem) {
            await Swal.fire({
              title: 'Blocked Product Found',
              text: `${blockedItem.name || 'A product'} has been blocked. Please remove it to continue.`,
              icon: 'warning',
              confirmButtonText: 'Go to Cart'
            });
            return window.location.href = '/cart';
          }

          // If any quantity exceeds stock
          const changedStock = stockStatus.some(item => item.stockChanged && !item.isBlocked);
          if (changedStock) {
            return Swal.fire('Stock Changed', 'Some quantities were adjusted due to stock limits.', 'warning')
              .then(() => location.reload());
          }


    
        // All Good → Proceed
        placeOrder(address, payment, numericValue, discount);
    
      } catch (error) {
        console.error("Order Validation Error:", error);
        Swal.fire('Error', error.message || 'Something went wrong!', 'error');
      }
    });
    
    
    function placeOrder(address, payment, numericValue, discount) {
      $.ajax({
        url: '/placeOrder',
        method: 'POST',
        contentType: "application/json",
        data: JSON.stringify({
          totalPrice: numericValue,
          addressId: address,
          payment: payment,
          discount: discount
        }),
        success: function (response) {
          const orderId = response.order?._id;
    
          if (response.method === "cod" || (response.method === "wallet" && response.payment === true)) {
            Swal.fire({
              title: "Order Success",
              text: "Order placed successfully!",
              icon: "success",
              showCancelButton: true,
              confirmButtonText: "View orders",
              cancelButtonText: "Continue shopping",
              reverseButtons: true
            }).then(result => {
              window.location.href = result.isConfirmed ? `/viewOrderDetails/${orderId}` : '/';
            });
    
          } else if (response.method === "wallet" && response.payment === false) {
            Swal.fire({
              title: "Order Failed",
              text: "Wallet amount is not enough",
              icon: "error"
            }).then(() => {
              location.href = '/checkout';
            });
    
          } else if (response.method === "razorpay") {
            const orderAmount = Math.round(numericValue * 100);
            const options = {
              "key": "rzp_test_ClMWweWS70Dbkd",
              "amount": orderAmount,
              "currency": "INR",
              "name": "TrendiQue",
              "description": "Test Transaction",
              "order_id": response.razorPayOrder.id,
              "handler": function (payment) {
                //verifyPayment(response.razorPayOrder, status, orderId);
                //verifyAndPlaceOrder(status, address, numericValue, discount);
                //verifyAndPlaceOrder(response, address, totalPrice, discount);
                verifyAndPlaceOrder(payment, address, numericValue, discount);
              },
              "prefill": {
                "name": "Customer Name",
                "email": "customer@example.com",
                "contact": "9961618585"
              },
              "theme": { "color": "#3399cc" }
            };
            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function (resp) {
              console.log("Payment failed", resp); 
             /* verifyPayment({
                id: resp.error.metadata.order_id,
                receipt: `order_receipt_${orderId}`
              }, resp.error, orderId);*/
              Swal.fire({
                title: "Payment Failed",
                text: resp.error.description || 'Transaction was unsuccessful.',
                icon: "error",
                confirmButtonText: "Try Again"
              }).then(() => {
                window.location.href = '/checkout';
            });
          });
          try {
            rzp.open();
          } catch (err) {
            console.error("Razorpay open error:", err);
          }
    
          } else {
            Swal.fire('Error Occurred', 'Cannot process order.', 'error');
          }
        }
      });
    }
    
    function verifyPayment(order, payment, orderId) {
      $.ajax({
        url: '/verifyPayment',
        method: 'POST',
        data: { order, payment },
        success: function (response) {
          if (response.status) {
            Swal.fire({
              title: "Order success",
              text: "Order placed successfully",
              icon: "success",
              showCancelButton: true,
              confirmButtonText: "View orders",
              cancelButtonText: "Continue shopping",
              reverseButtons: true
            }).then(result => {
              window.location.href = result.isConfirmed ? `/viewOrderDetails/${orderId}` : '/';
            });
          } else {
            Swal.fire("Payment Failed", "Transaction failed. Try again.", "error");
          }
        }
      });
    }
    function verifyAndPlaceOrder(payment, addressId, totalPrice, discount) {
      $.ajax({
        url: '/verifyPayment',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ payment }),
       // data: JSON.stringify({ payment: response }),
        success: function (response) {
          if (response.status) {
            // Now place order after payment success
            $.ajax({
              url: '/confirmOrderAfterRazorpay',
              method: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({ addressId, payment: 'razorpay', totalPrice, discount }),
              success: function (res) {
                if (res.success) {
                  Swal.fire({
                    title: "Order success",
                    text: "Order placed successfully",
                    icon: "success",
                    showCancelButton: true,
                    confirmButtonText: "View orders",
                    cancelButtonText: "Continue shopping",
                    reverseButtons: true
                  }).then(result => {
                    window.location.href = result.isConfirmed ? `/viewOrderDetails/${res.orderId}` : '/';
                  });
                } else {
                  Swal.fire("Order Failed", "Order could not be created after payment.", "error");
                }
              }
            });
          } else {
            Swal.fire("Payment Failed", "Verification failed", "error");
          }
        }
      });
    }
    
    
    
  
</script>

<script>

  async function toggleCoupon(){
    const codeInput = document.getElementById('couponCode')
    const message = document.getElementById('couponMessage')
    const applyBtn = document.getElementById('applyBtn')

    if(applyBtn.innerText === 'Apply'){
      const code = codeInput.value.trim()
      if(!code) return message.innerText = 'Enter a coupon code'
 
      console.log("Coupon code entered:", code)

    
      const response = await fetch('/apply-coupon', {
        method: 'POST',
        headers: {
          'content-type': 'application/json'
        },
        body: JSON.stringify({code})
      })

      const result = await response.json()

      if(response.ok){
        applyBtn.innerText = 'Remove Coupon'
        codeInput.disabled = true
        document.getElementById('discountAmount').innerText = `-₹${result.discount}`
       /* document.getElementById('grandTotal').innerText = `₹${result.newTotal}`*/
       const shippingCharge = parseFloat(document.getElementById('shippingCharge').textContent) || 0;
       const grandTotal = parseFloat(result.newTotal) + shippingCharge;
        document.getElementById('totalAmount').innerText= `₹${result.newTotal}`
        
        document.getElementById('totalPayable').value= `₹${result.newTotal}`
        message.innerText = `Coupon ${code.toUpperCase()} Applied`
      }else{
        message.innerText = result.message
        message.classList.add('text-dange')
      }
      
    }else{
      await fetch('/cancel-coupon')
      applyBtn.innerText = 'Apply'
      codeInput.disabled = false
      codeInput.value = ''
      message.innerText = ''
      document.getElementById('discountAmount').innerText = '-₹0'
      //const base = <%= grandTotal %> + <%= shippingCharge %> ;
      //document.getElementById('grandTotal').innerText = `₹${base}`
      //document.getElementById('totalAmount').value = base;
      const originalGrandTotal = parseFloat(document.getElementById('originalGrandTotal').value);
  const originalShipping = parseFloat(document.getElementById('originalShippingCharge').value);
  const total = (originalGrandTotal + originalShipping).toFixed(2);

  document.getElementById('totalAmount').innerText = `₹${total}`;
  document.getElementById('totalPayable').value = total;

    }
  }
   


  <!-- Available Coupon -->
  document.getElementById('showCouponsBtn').addEventListener('click', async () => {
    const modalBody = document.getElementById('couponsModalBody');
    modalBody.innerHTML = '<p>Loading coupons...</p>';
  
    try {
      const res = await fetch('/available-coupons');
      const data = await res.json();
  
      if (data.success && data.coupons.length) {
        modalBody.innerHTML = ''; // clear loading text
  
        data.coupons.forEach(coupon => {
          const expiry = new Date(coupon.expiryDate).toLocaleDateString();
          const offer = coupon.type === 'percentage' ? `${coupon.offerPrice}% OFF` : `₹${coupon.offerPrice} OFF`;
  
          const couponCard = document.createElement('div');
          couponCard.classList.add('coupon-card', 'mb-3');
          couponCard.innerHTML = `
            <div>
              <strong>${coupon.code}</strong> — ${offer} <br />
              Min order: ₹${coupon.minimumPrice} <br />
              Valid till: ${expiry}
            </div>
            <button class="btn btn-sm btn-primary copy-btn" data-code="${coupon.code}">Copy</button>
          `;
          modalBody.appendChild(couponCard);
        });
  
        // Add copy functionality
        modalBody.querySelectorAll('.copy-btn').forEach(button => {
          button.addEventListener('click', () => {
            const code = button.getAttribute('data-code');
            navigator.clipboard.writeText(code).then(() => {
              //alert(`Copied coupon code: ${code}`);
            });
          });
        });
      } else {
        modalBody.innerHTML = '<p>No coupons available.</p>';
      }
    } catch (error) {
      console.error('Error loading coupons:', error);
      modalBody.innerHTML = '<p>Failed to load coupons. Try again later.</p>';
    }
  
    // Show the modal (Bootstrap 5)
    const couponsModal = new bootstrap.Modal(document.getElementById('couponsModal'));
    couponsModal.show();
  });
  

</script>

<!-- Bootstrap JS Bundle CDN -->
<!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> -->
<%- include('../partials/user/footer') %>
<!-- </body>
</html> -->

